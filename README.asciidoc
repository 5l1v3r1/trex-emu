

== TRex Emulation service 

The objective is to implement client side L3 protocols i.e ARP, IPv6, ND, MLD, IGMP in order to simulate a scale of clients and servers.
This project is not limited to client protocols, but it is a good start. The project provides a framework to implement and use client protocols.

The framework is fast enough for control plane protocols and will work with TRex server. Very fast L7 applications (on top of TCP/UDP) will run on TRex server.  One single thread of TRex-EMU can achieve a high rate of client creation/teardown.
Each of the aforementioned protocol is implemented as a plugin. These plugins are self contained and can signal events one to the other, or to the framework, using an event-bus. (e.g. DHCP signals that it has a new IPv6 address).
The framework has an event driven architecture, this way it can scale. The framework also provides to a protocol plugin infrastructure, for example RPC, timers, packet parsers, simulation and more.


**The main properties**:

* Fast client creation/teardown. ~3K/sec for one thread.
* Number of active client/namespace is limited only by the memory on the server.
* Packet per second (PPS) in the range of 3-5 MPPS.
* Python 2.7/3.0 Client API exposed through JSON-RPC.
* Interactive support - Integrated with the TRex console.
* Modular design. Each plugin is self contained and can be tested on its own.
* TRex-EMU supports the following protocols:

[options="header",cols="1,2",width="60%"]
|=================
| Plug-in | Description
| ARP     | RFC 826
| ICMP    | RFC 777
| DHCPv4  | RFC 2131 client side
| IGMP    | IGMP v3/v2/v1 RFC3376
| IPv6    | IPv6 ND, RFC 4443, RFC 4861, RFC 4862 and MLD and MLDv2 RFC 3810
| DHCPv6  | RFC 8415 client side
|=================


=== How to build

.Build
-----
$source ./b
$cd src/
$go install -v cmd/trex-emu.go
-----

.Run Tests
-----
$source ./b
$cd src/
$go test emu/core
$go test emu/plugins/ipv6
$go test emu/plugins/arp
$go test emu/plugins/igmp
$go test emu/plugins/ipv6
$go test emu/plugins/dhcpv6
$go test emu/plugins/dhcp
-----

.Run
-----
./$root/bin/trex-emu 
-----

.VsCode
-----
$source ./b
$export GO111MODULE=auto; code
-----

.VsCode plugin 
-----
"go.toolsGopath" : "/scratch/hhaim/vscode-gotools",
"go.inferGopath": true,
"go.useLanguageServer" :true,
"go.buildOnSave": true,
"go.vetOnSave": true,
-----


NOTE: ZMQ was build to x86. You should add the share object to the LDD path for installing the package. See how to build it.

